@page "/order/details/{Id:int}"
@inject IOrderRepository _orderRepository
@inject IJSRuntime _jsRuntime
@using Tangy_Common
@*@attribute [Authorize]*@
@if (IsLoading)
{
	<div class="text-center">
		<img src="/images/loading.gif">
	</div>
}
else
{
	<div class="container">
		<div class="card">
			<div class="card-header bg-dark text-light ml-0">
				<div class="container row">
					<div class="col-12 d-none d-md-block col-md-6 pb-1">
						<i class="fas fa-shopping-cart"></i> &nbsp; Order Summary
					</div>
					<div class="col-12 col-md-4 offset-md-2 text-right">
						<a href="/orderList" class="btn btn-outline-info form-control btn-sm">Back to Orders</a>
					</div>
				</div>
			</div>
			<div class="card-body">
				<div class="container rounded p-2">
					<div class="row">
						<div class="col-12 col-lg-6 pb-4">
							<EditForm Model="Order" OnValidSubmit="UpdateOrder">
								<DataAnnotationsValidator />
								<div class="row">
									<h4 class="d-flex justify-content-between align-items-center mb-3">
										<span class="text-primary">Customer Details:</span>
									</h4>
								</div>
								<div class="row my-1">
									<div class="col-3">Name</div>
									<div class="col-9">
										<InputText @bind-Value="Order.OrderHdr.Name" class="form-control" />
										<ValidationMessage For="()=>Order.OrderHdr.Name"></ValidationMessage>
									</div>
								</div>
								<div class="row my-1">
									<div class="col-3">Phone</div>
									<div class="col-9">
										<InputText @bind-Value="Order.OrderHdr.PhoneNumber" class="form-control" />
										<ValidationMessage For="()=>Order.OrderHdr.PhoneNumber"></ValidationMessage>
									</div>
								</div>
								<div class="row my-1">
									<div class="col-3">Address</div>
									<div class="col-9">
										<InputText @bind-Value="Order.OrderHdr.StreetAddress" class="form-control" />
										<ValidationMessage For="()=>Order.OrderHdr.StreetAddress"></ValidationMessage>
									</div>
								</div>
								<div class="row my-1">
									<div class="col-3">City</div>
									<div class="col-9">
										<InputText @bind-Value="Order.OrderHdr.City" class="form-control" />
										<ValidationMessage For="()=>Order.OrderHdr.City"></ValidationMessage>
									</div>
								</div>
								<div class="row my-1">
									<div class="col-3">State</div>
									<div class="col-9">
										<InputText @bind-Value="Order.OrderHdr.State" class="form-control" />
										<ValidationMessage For="()=>Order.OrderHdr.State"></ValidationMessage>
									</div>
								</div>
								<div class="row my-1">
									<div class="col-3">Zip Code</div>
									<div class="col-9">
										<InputText @bind-Value="Order.OrderHdr.PostalCode" class="form-control" />
										<ValidationMessage For="()=>Order.OrderHdr.PostalCode"></ValidationMessage>
									</div>
								</div>
@*								<div class="row my-1">
									<div class="col-3">Email</div>
									<div class="col-9">
										<input type="text" readonly value="@Order.OrderHdr.Email" class="form-control" />
									</div>
								</div> *@
								<div class="row my-1">
									<div class="col-3">Order Date</div>
									<div class="col-9">
										<input type="text" readonly value="@Order.OrderHdr.OrderDate.ToShortDateString()" class="form-control" />
									</div>
								</div>
								<div class="row my-1">
									<div class="col-3">Carrier</div>
									<div class="col-9">
										<InputText @bind-Value="Order.OrderHdr.Carrier" class="form-control" />
									</div>
								</div>
								<div class="row my-1">
									<div class="col-3">Tracking</div>
									<div class="col-9">
										<InputText @bind-Value="Order.OrderHdr.Tracking" class="form-control" />
									</div>
								</div>
								@if (Order.OrderHdr.Status != SD.Status_Confirmed && Order.OrderHdr.Status != SD.Status_Pending)
								{
									<div class="row my-1">
										<div class="col-3">Shipping Date</div>
										<div class="col-9">
											<input type="text" class="form-control" />
										</div>
									</div>
								}
								<div class="row my-1">
									<div class="col-3">Session ID</div>
									<div class="col-9">
										<input type="text" readonly value="@Order.OrderHdr.SessionId" class="form-control" />
									</div>
								</div>
								<div class="row my-1">
									<div class="col-3">Order Status</div>
									<div class="col-9">
										<input value="@Order.OrderHdr.Status" type="text" readonly class="form-control" />
									</div>
								</div>
								@if (Order.OrderHdr.Status == SD.Status_Confirmed)
								{
									<input type="submit" class="btn btn-warning form-control my-1" value="Update Order Details" />
								}
							</EditForm>
						</div>
						<div class="col-12 col-lg-5 offset-lg-1">
							<h4 class="d-flex justify-content-between align-items-center mb-3">
								<span class="text-primary">Order Summary</span>
							</h4>
							<ul class="list-group mb-3">
								@foreach (var detail in Order.OrderDtls)
								{
									<li class="list-group-item d-flex justify-content-between p-2">
										<div class="row container">
											<div class="col-8">
												<h6 class="my-0 text-primary">@detail.ProductName</h6>
												<small class="text-muted">Price : @detail.Price.ToString("c")</small><br />
												<small class="text-muted">Quantity : @detail.Count</small>
											</div>
											<div class="col-4 text-end">
												<p class="text-success">@((detail.Count * detail.Price).ToString("c"))</p>
											</div>
										</div>
									</li>
								}
								<li class="list-group-item bg-info">
									<div class="row container">
										<div class="col-6">
											<h5 class="text-white">TOTAL </h5>
										</div>
										<div class="col-6 text-end">
											<h5 class="text-white">@Order.OrderHdr.OrderTotal.ToString("c")</h5>
										</div>
									</div>
								</li>
							</ul>

							@if (Order.OrderHdr.Status == SD.Status_Confirmed)
							{
								<button @onclick="ShipOrder" class="btn btn-success form-control my-1">Ship Order</button>
							}

							@if (Order.OrderHdr.Status == SD.Status_Confirmed ||
									Order.OrderHdr.Status == SD.Status_Pending)
							{
								<button @onclick="CancelOrder" class="btn btn-danger form-control my-1">Cancel Order</button>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int Id { get; set; } = 0;
	public bool IsLoading { get; set; } = true;
	public OrderDTO Order { get; set; } = new();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{

			await LoadOrder();
		}
	}

	private async Task LoadOrder()
	{
		IsLoading = true;
		StateHasChanged();
		Order = await _orderRepository.Get(Id);
		IsLoading = false;
		StateHasChanged();
	}

	private async Task UpdateOrder()
	{
		var OrderHeaderDTO = await _orderRepository.UpdateHdr(Order.OrderHdr);
		Order.OrderHdr = OrderHeaderDTO;
		_jsRuntime.ToastrSuccess("Order has been updated successfully");
	}

	private async Task ShipOrder()
	{
		if (string.IsNullOrEmpty(Order.OrderHdr.Carrier) || string.IsNullOrEmpty(Order.OrderHdr.Tracking))
		{
			_jsRuntime.ToastrError("Please Enter Tracking and Carrier Information");
			return;
		}

		Order.OrderHdr.Status = SD.Status_Shipped;
		var OrderHeaderDTO = await _orderRepository.UpdateHdr(Order.OrderHdr);
		Order.OrderHdr = OrderHeaderDTO;
		_jsRuntime.ToastrSuccess("Order has been Shipped!");
	}

	private async Task CancelOrder()
	{
		Order.OrderHdr = await _orderRepository.CancelOrder(Order.OrderHdr.Id);
		if (Order.OrderHdr.Status == SD.Status_Cancelled)
		{
			_jsRuntime.ToastrSuccess("Order has been cancelled successfully");
		}
		if (Order.OrderHdr.Status == SD.Status_Refunded)
		{
			_jsRuntime.ToastrSuccess("Order has been cancelled & refunded successfully");
		}

	}
}