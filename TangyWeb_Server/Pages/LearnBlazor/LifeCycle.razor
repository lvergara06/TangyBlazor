@page "/learnBlazor/lifeCycle"
@using System.Threading
<h3>LifeCycle</h3>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />

@Count <button @onclick=StartCountDown>Start Countdown</button>

<div class="border">
     <_LifeCycleComponent CountValue="@currentCount"></_LifeCycleComponent>
</div>
@if(EventType != null)
{
    @foreach(var log in EventType)
    {
        <p>Log: @log</p>
    }
}

@code {
    private int currentCount = 0;
    List<string> EventType = new List<string>();
    private int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }
    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized is called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync is called");
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParemeterSet is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParemeterSetAsync is called");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }
        EventType.Add("OnAfterRender is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync is called");
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called");
        return true;
    }

    void StartCountDown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    void  TimeCallBack(object state)
    {
        if(Count > 0 )
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}
