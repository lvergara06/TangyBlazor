@page "/category/create"
@page "/category/edit/{id:int}"

@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager

<div class="row my-2">
	<h3 class="card-title text-primary mb-3 ml-3">@Title Category</h3>

	<div class="col-10">
		@if(isLoading)
		{
			//Loading Symbol
			<div class="text-center">
				<img src="/images/loading.gif">
			</div>
		}
		else
		{
			<EditForm Model="Category" OnValidSubmit="UpSertCategory">
				<DataAnnotationsValidator/>
				<div class="form-group">
					<label>Name</label>
					<InputText @bind-Value="Category.Name" class="form-control"></InputText>
					<ValidationMessage For="()=>Category.Name"></ValidationMessage>
				</div>
				<div class="form-group py-2">
					<button class="btn btn-prmary">@Title</button>
					<NavLink href="category" class="btn btn-secondary">Back to Index</NavLink>
				</div>
			</EditForm>
		}
	</div>
</div>


@code {

	private CategoryDTO Category { get; set; } = new CategoryDTO();

	[Parameter]
	public int Id { get; set; }

	public string Title {get; set; } = "Create";

	public bool isLoading { get; set; }

	private async Task UpSertCategory()
	{
		if(Id == 0)
		{
			await _categoryRepository.Create(Category);	
		}
		else
		{
			await _categoryRepository.Update(Category);
		}
		_navigationManager.NavigateTo("category");
	}

	//This is done before the first render of the page. This means it holds up the rendering until the Task.Run thread comes back.
	//protected override async Task OnInitializedAsync()
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender)
		{
			if(Id == 0)
			{
				isLoading=false;
			}
			else
			{
				//update
				Title="Update";
				await GetCategory();
			}
		}

	}

	private async Task GetCategory()
	{
		//StateHasChanged is called to make the needed changes to the page if statements.
		isLoading = true;
		StateHasChanged();
		if(Id != 0)
		{
			Category = await _categoryRepository.Get(Id);
		}
		isLoading = false;
		StateHasChanged();
	}
}
