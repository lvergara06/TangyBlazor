@page "/product/create"
@page "/product/edit/{id:int}"

@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime

<div class="row my-2">
	<h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

	<div class="col-10">
		@if(isLoading)
		{
			//Loading Symbol
			<div class="text-center pt-2">
				<img src="/images/loading.gif">
			</div>
		}
		else
		{
			<EditForm Model="Product" OnValidSubmit="UpSertProduct">
				<DataAnnotationsValidator/>
				<div class="form-group">
					<label>Name</label>
					<InputText @bind-Value="Product.Name" class="form-control"></InputText>
					<ValidationMessage For="()=>Product.Name"></ValidationMessage>
				</div>
				<div class="form-group">
					<label>Color</label>
					<InputText @bind-Value="Product.Color" class="form-control"></InputText>
					<ValidationMessage For="()=>Product.Color"></ValidationMessage>
				</div>
				<div class="form-group">
					<label>Description</label>
					<SfRichTextEditor @bind-Value="Product.Description"></SfRichTextEditor>
					<ValidationMessage For="()=>Product.Description"></ValidationMessage>
				</div>
				<div class="row pt-3">
					<div class="form-group col-6">
					<div class="form-check">
						<InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
						<label class="form-check-label">Is Shop Favorites</label>
					</div>
					</div>
					<div class="form-group col-6">
					<div class="form-check">
						<InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
						<label class="form-check-label">Is Customer Favorites</label>
					</div>
					</div>
					<div class="form-group col-6">
						<label>Category</label>
						<InputSelect @bind-Value="Product.CategoryId" class="form-select">
							<option value="0" disabled="disabled" selected>--Select Category--</option>
							@foreach(var cat in Categories)
							{
								<option value="@cat.Id">@cat.Name</option>
							}
						</InputSelect>
						<ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
					</div>
					<div class="form-group pt-4 col-6">
						<InputFile OnChange="HandleImageUpload"></InputFile>
					</div>
				</div>


				<div class="form-group py-2">
					<button class="btn btn-prmary">@Title</button>
					<NavLink href="product" class="btn btn-secondary">Back to Index</NavLink>
				</div>
			</EditForm>
		}
	</div>
	<div class="col-md-2">
		<img src="@Product.ImageUrl" class="w-100" />
	</div>
</div>


@code {

	private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
	private ProductDTO Product { get; set; } = new ProductDTO()
	{
		ImageUrl = "/images/default.png"
	};
	public string OldImageUrl { get; set; }

	[Parameter]
	public int Id { get; set; }

	public string Title {get; set; } = "Create";

	public bool isLoading { get; set; }

	private async Task UpSertProduct()
	{
		if(Product.Id == 0)
		{
			await _productRepository.Create(Product);
			await _jsRuntime.ToastrSuccess("Product created successfully.");
		}
		else
		{
			//update
			if(OldImageUrl != Product.ImageUrl && !OldImageUrl.Contains("default.png"))
			{
				_fileUpload.Deletefile(OldImageUrl);
			}
			await _productRepository.Update(Product);
			await _jsRuntime.ToastrSuccess("Product updated successfully.");
		}
		_navigationManager.NavigateTo("product");
	}

	//This is done before the first render of the page. This means it holds up the rendering until the Task.Run thread comes back.
	//protected override async Task OnInitializedAsync()
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender)
		{
			GetProduct();
		}

	}

	private async Task GetProduct()
	{
		//StateHasChanged is called to make the needed changes to the page if statements.
		isLoading = true;
		StateHasChanged();
		Categories = await _categoryRepository.GetAll();
		if(Id != 0)
		{
			Title = "Update";
			Product = await _productRepository.Get(Id);
			OldImageUrl = Product.ImageUrl;
		}
		isLoading = false;
		StateHasChanged();
	}
	private async Task HandleImageUpload(InputFileChangeEventArgs e)
	{
		isLoading = true;
		try
		{
			if(e.GetMultipleFiles().Count>0)
			{
				foreach(var file in e.GetMultipleFiles())
				{
					System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
					if(fileInfo.Extension.ToLower() == ".jpg" ||
					fileInfo.Extension.ToLower() == ".png" ||
					fileInfo.Extension.ToLower() == ".jpeg")
					{
						Product.ImageUrl = await _fileUpload.UploadFile(file);
					}
					else
					{
						await _jsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
						return;
					}
				}
			}
			isLoading = false;
		}
		catch
		{
			
		}
	}
}
