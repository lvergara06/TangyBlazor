@page "/orderconfirmation"

@inject ILocalStorageService _localStorage
@inject IOrderService _orderService

@if (isProcessing)
{
	<div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
		<img src="images/ajax-loader.gif" />
	</div>
}
else
{
	@if (Order.OrderHdr.Status == SD.Status_Confirmed)
	{
		<div class="row mt-4 pt-4">
			<div class="col-10 offset-1 text-center">
				<h2 class="text-warning">Order Confirmed</h2>
				<p>Your order has been placed successfully with order id : @Order.OrderHdr.Id</p>
			</div>
			<div class="col-8 offset-2">
				<img src="/images/confirmation.jpg" width="100%" style="border-radius:30px;" />
			</div>
		</div>
	}
	else
	{
		<div class="row mt-4 pt-4">
			<div class="col-10 offset-1 text-center">
				<h2 class="text-danger">Order Issue!</h2>
				<p>Your order had payment issue please cotact us with Order ID:  @Order.OrderHdr.Id</p>
			</div>
			<div class="col-8 offset-2">
				<img src="/images/confirmation.jpg" width="100%" style="border-radius:30px;" />
			</div>
		</div>
	}
}
@code {
	private bool isProcessing { get; set; } = false;
	private OrderDTO Order { get; set; }

	protected override async Task OnInitializedAsync()
	{
		isProcessing = true;
		Order = await _localStorage.GetItemAsync<OrderDTO>(SD.Local_OrderDetails);

		var updatedOrder = await _orderService.MarkPaymentSuccessful(Order.OrderHdr);

		if (updatedOrder.Status == SD.Status_Confirmed)
		{
			Order.OrderHdr.Status = updatedOrder.Status;
			await _localStorage.RemoveItemAsync(SD.Local_OrderDetails);
			await _localStorage.RemoveItemAsync(SD.ShoppingCart);
		}
		isProcessing = false;
	}
}
