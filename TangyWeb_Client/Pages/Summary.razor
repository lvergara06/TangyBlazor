@page "/summary"
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime _jsRunTime
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject IOrderService _orderService
@inject IPaymentService _paymentService

@attribute [Authorize]

@if (isProcessing)
{
	<div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
		<img src="images/ajax-loader.gif" />
	</div>
}
else
{
	<div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">

		<div class="row p-2 my-3">
			<div class="col-12 col-lg-7 p-4">
				<div class="row px-2 text-success ">
					<div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Order Summary</p></div>
					<div class="col-4 p-0" style="text-align:right">
						<a href="/cart" class="btn btn-secondary btn-block">Back to cart</a>
					</div>
				</div>
				@foreach (var prod in Order.OrderDtls)
				{
					<div class="row border p-1 m-1">

						<div class="col-3 col-md-2 ">
							<img src="@prod.Product.ImageUrl" width="100%">
						</div>
						<div class="col-5 col-md-5 ">
							<span class="">Product : @prod.ProductName </span><br />
							<span class="pt-1">Size : @prod.Size</span><br />
							<span class="pt-1">Count : @prod.Count</span><br />

						</div>
						<div class="col-4 col-md-5 " style="text-align:right;">
							<h4 class="text-warning font-weight-bold pt-2">
								USD
								<span style="border-bottom:1px solid #ff6a00">
									@((prod.Count * prod.Price).ToString("c"))
								</span>
							</h4>
						</div>
					</div>
				}
				<div class="row" style="text-align:right">
					<div class="col-12 px-3">
						<h3> Order Total : <span class="text-secondary">@Order.OrderHdr.OrderTotal.ToString("c")</span> </h3>
					</div>
				</div>

			</div>

			<div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
				<EditForm Model="Order.OrderHdr" OnValidSubmit="HandleCheckout">
					<DataAnnotationsValidator />
					<div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Enter Details</p></div></div>

					<div class="form-group pt-2">
						<label class="text-warning">Name</label>
						<InputText @bind-Value="Order.OrderHdr.Name" type="text" class="form-control" />
						<ValidationMessage For="()=>Order.OrderHdr.Name"></ValidationMessage>
					</div>
					<div class="form-group pt-2">
                        <label class="text-warning">Email</label>
                        <InputText @bind-Value="Order.OrderHdr.Email" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHdr.Email"></ValidationMessage>
                    </div>
					<div class="form-group pt-2">
						<label class="text-warning">Phone</label>
						<InputText @bind-Value="Order.OrderHdr.PhoneNumber" type="text" class="form-control" />
						<ValidationMessage For="()=>Order.OrderHdr.PhoneNumber"></ValidationMessage>
					</div>
					<div class="form-group pt-2">
						<label class="text-warning">Street Address</label>
						<InputText @bind-Value="Order.OrderHdr.StreetAddress" type="text" class="form-control" />
						<ValidationMessage For="()=>Order.OrderHdr.StreetAddress"></ValidationMessage>
					</div>
					<div class="form-group pt-2">
						<label class="text-warning">City</label>
						<InputText @bind-Value="Order.OrderHdr.City" type="text" class="form-control" />
						<ValidationMessage For="()=>Order.OrderHdr.City"></ValidationMessage>
					</div>
					<div class="form-group pt-2">
						<label class="text-warning">State</label>
						<InputText @bind-Value="Order.OrderHdr.State" type="text" class="form-control" />
						<ValidationMessage For="()=>Order.OrderHdr.State"></ValidationMessage>
					</div>
					<div class="form-group pt-2">
						<label class="text-warning">Postal Code</label>
						<InputText @bind-Value="Order.OrderHdr.PostalCode" type="text" class="form-control" />
						<ValidationMessage For="()=>Order.OrderHdr.PostalCode"></ValidationMessage>
					</div>


					<div class="form-group pt-2">
						<button type="submit" class="btn btn-success form-control">Checkout Now</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
}
@code {
	public bool isProcessing { get; set; } = false;
	private OrderDTO Order { get; set; } = null;
	private IEnumerable<ProductDTO> Products { get; set; }
	private double Total = 0;

	protected override async Task OnInitializedAsync()
	{
		isProcessing = true;
		List<ShoppingCart> cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
		Products = await _productService.GetAll();
		Order = new()
			{
				OrderHdr = new()
				{
					OrderTotal = 0,
					Status = SD.Status_Pending

				},
				OrderDtls = new List<OrderDtlDTO>()

			};

		foreach (var item in cart)
		{
			ProductDTO product = Products.FirstOrDefault(i => i.Id == item.ProductId);
			ProductPriceDTO productPrice = product.Prices.FirstOrDefault(i => i.Id == item.ProductPriceId);

			OrderDtlDTO orderDtlDTO = new()
				{
					ProductId = item.ProductId,
					Size = productPrice.Size,
					Count = item.Count,
					Price = productPrice.Price,
					ProductName = product.Name,
					Product = product
				};
			Order.OrderDtls.Add(orderDtlDTO);
			Order.OrderHdr.OrderTotal += (item.Count * productPrice.Price);
		}

		if (await _localStorage.GetItemAsync<UserDTO>(SD.UserDetails) != null)
		{
			var userInfo = await _localStorage.GetItemAsync<UserDTO>(SD.UserDetails);
			Order.OrderHdr.UserId = userInfo.Id;
			Order.OrderHdr.Name = userInfo.Name;
			Order.OrderHdr.PhoneNumber = userInfo.PhoneNumber;

		}

		isProcessing = false;
	}
	private async Task HandleCheckout()
	{
		try
		{

			var paymentDto = new StripePaymentDTO()
				{
					Order = Order
				};

			var result = await _paymentService.Checkout(paymentDto);

			var StripeSessionAndPI = result.Data.ToString().Split(';');

			Order.OrderHdr.PaymentIntentId = StripeSessionAndPI[1];

			Order.OrderHdr.SessionId = StripeSessionAndPI[0];

			var orderDTOSaved = await _orderService.Create(paymentDto);

			await _localStorage.SetItemAsync(SD.Local_OrderDetails, orderDTOSaved);

			await _jsRunTime.InvokeVoidAsync("redirectToCheckout", StripeSessionAndPI[0]); 
		}
		catch (Exception e)
		{
			await _jsRunTime.ToastrError(e.Message);
		}

	}
}
