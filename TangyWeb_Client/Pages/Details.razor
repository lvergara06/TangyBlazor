@page "/details/{ProductId:int}"
@inject IProductService _productService
@inject ICartService _cartService
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

@if(isProcessing)
{
<div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
    <img src="images/ajax-loader.gif" />
</div>
}
else
{
    // Use editForm with OnValidSumbit="class" and Model="ModelClass" to bind a form to the data model
<EditForm OnValidSubmit="AddToCart" Model="DetailsVM" method="post">
    <DataAnnotationsValidator/>
    <div class="card container mt-4">
        <div class="card-header ml-0  row">
            <div class="col-12 col-md-6">
                <h1 class="text-primary">@Product.Name</h1>
            </div>

            <div class="col-12 col-md-6 text-end pt-4">
                <span class="badge bg-info pt-2" style="height:30px;">@Product.Category.Name</span>
                <span class="badge bg-warning pt-2" style="height:30px;">@Product.Color</span>
            </div>
        </div>
        <div class="card-body">
            <div class="container rounded p-2">
                <div class="row">
                    <div class="col-10">
                        <p>@((MarkupString)Product.Description)</p>
                        <div class="row">
                            @foreach(var productPrice in Product.Prices)
                            {
                                @if(productPrice.Id == DetailsVM.SelectedProductPriceId)
                                {
                                    <div class="col-2 bg-light text-center pt-2 m-2" style="border:3px solid #28A745; border-radius:10px;box-shadow:5px">
                                    <p>@productPrice.Size</p>
                                    <p>@productPrice.Price.ToString("c")</p>
                                    </div>
                                }
                                else
                                {
                                    // <div tags have an @onclick function
                                    // This binds the div to a function
                                    // (args)=>class(args, class arguments) allows for arguments to be passed
                                    <div @onclick="(args)=>SelectedProductPrice(args, productPrice.Id)"
                                     class="col-2 bg-light text-center pt-2 m-2" style="border:3px solid; border-radius:10px;box-shadow:5px">
                                    <p>@productPrice.Size</p>
                                    <p>@productPrice.Price.ToString("c")</p>
                                    </div>
                                }
                            }
                                <div class="row pl-2">
                                    <div class="col-2 text-primary"><h4>Count</h4></div>
                                    <div class="col-10">
                                    @*Use InputNumber with @bindValue to bind an input to the field in the model*@
                                    <InputNumber @bind-Value="DetailsVM.Count"/>
                                    <ValidationMessage For="@(()=>DetailsVM.Count)" />
                                    </div>
                                </div>
                        </div>
                    </div>
                    <div class="col-2">
                        <img src="@Product.ImageUrl" width="100px" class="rounded" />
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="row">
                    <div class="col-12 col-md-6 pb-1">
                        <a class="btn btn-success form-control " href="/">Back to Home</a>
                    </div>
                    <div class="col-12 col-md-6 pb-1">
                        @if(DetailsVM.SelectedProductPriceId > 0)
                        {
                            <button type="submit" value="Add to Cart" class="btn btn-primary form-control">Add to Cart</button>
                        }
                        else
                        {
                            <button type="submit" disabled value="Add to Cart" class="btn btn-primary form-control">Add to Cart</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>
}
@code {
    [Parameter]
    public int ProductId { get; set; }

    // Have a View Model dedicated to the selected item on this screen
    //Important detail on current screen : productprice id selected, count specified 
    //{you might want productprice navigator}
    // Note that this model is internal since we wont be using database. 
    //We will be using internal storage: Blazored LocalStorage
    private DetailsVM DetailsVM { get; set; } = new();

    //ShoppingCart is used as a model when an item is chosen to be added to the shopping cart
    //Relevant infor should include product id, product navigator, price id and navigator, and count
    private ShoppingCart ShoppingCart { get; set; } = new();



    public ProductDTO Product { get; set; } = new();
    public bool isProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        isProcessing = true;
        Product = await _productService.Get(ProductId);
        isProcessing = false;
    }

    // When this function is called through a binded div you must use MouseEventArgs e as one of its arguments.
    private async Task SelectedProductPrice(MouseEventArgs e, int productPriceId)
    {
        DetailsVM.SelectedProductPriceId = productPriceId;
        isProcessing = true;
        DetailsVM.ProductPrice = Product.Prices.FirstOrDefault(u => u.Id == productPriceId);
        isProcessing = false;
    }
    private async Task AddToCart()
    {
        isProcessing = true;
        ShoppingCart.ProductId = ProductId;
        ShoppingCart.Product = await _productService.Get(ProductId);
        ShoppingCart.ProductPriceId = DetailsVM.SelectedProductPriceId;
        ShoppingCart.ProductPrice = Product.Prices.FirstOrDefault(u => u.Id == DetailsVM.SelectedProductPriceId);
        ShoppingCart.Count = DetailsVM.Count;
        await _cartService.IncrementCart(ShoppingCart);
        isProcessing = false;
        _navigationManager.NavigateTo("/");
        await _jsRuntime.ToastrSuccess("Product added to cart successfully");

    }
}
