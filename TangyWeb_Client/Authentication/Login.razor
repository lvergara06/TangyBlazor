@page "/login"
@using System.Web

@inject IAuthenticationService _authService
@inject NavigationManager _navigationManager
@inject IJSRuntime _JsRuntime

<EditForm Model="SignInRequest" OnValidSubmit="SignIn">
    <div class="py-4">
        <div class=" row form-group ">
            <div class="col-6 offset-3 ">
                <div class="card border">
                    <div class="card-body px-lg-5 pt-4">
                        <h3 class="col-12 text-success text-center py-2">
                            <strong>Sign In</strong>
                        </h3>
                            @if(ShowRegistrationErrors)
                            {
                                <p>@Error</p>
                            }
                        <div class="py-2">
                            <InputText @bind-Value="SignInRequest.UserName" class="form-control" placeholder="Email..." />
                            <ValidationMessage For="(()=>SignInRequest.UserName)"/>
                        </div>
                        <div class="py-2">
                            <InputText @bind-Value="SignInRequest.Password" class="form-control" placeholder="Password..." />
                            <ValidationMessage For="(()=>SignInRequest.Password)"/>
                        </div>
                        <div class="py-2">
                            <button type="submit" class="btn btn-success btn-block"><i class="bi bi-person-bounding-box"></i> Sign in</button>
                            <NavLink href="/register" class="btn btn-primary text-white m-2"><i class="bi bi-person-plus-fill"></i> Register as a new user</NavLink>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private SignInRequestDTO SignInRequest { get; set; } = new();
    public bool IsProcessing { get; set; }
    public bool ShowRegistrationErrors { get; set; }
    public string Error { get; set; } 

    private async Task SignIn()
    {
        var result = await _authService.Login(SignInRequest);

        if(result.IsAuthSuccessful)
        {
            var absoluteUri = new Uri(_navigationManager.Uri);
            var queryParam = HttpUtility.ParseQueryString(absoluteUri.Query);
            var returnUrl = queryParam["returnUrl"];

            if(String.IsNullOrEmpty(returnUrl))
            {
                 _navigationManager.NavigateTo("/");
            }
            else
            {
                 _navigationManager.NavigateTo("/" + returnUrl);
            }           
            await _JsRuntime.ToastrSuccess("Login Successful");
        }
        else
        {
            Error = result.ErrorMessage;
            ShowRegistrationErrors = true;
        }
    }
}
